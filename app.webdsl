website {
    name "My Awesome Site"
    author "John Smith"
    version "1.0"
    port 3123
    database "postgresql://localhost/express-test"

    layouts {
        "main" {
            content {
                h1 "Site Header"
                p "Welcome to our website"
                "content"
                p "Footer text"
            }
        }
        "blog" {
            html {
                <header>
                    <h1>Blog Layout</h1>
                    <nav>
                        <a href="/">Home</a> |
                        <a href="/blog">Blog</a>
                    </nav>
                </header>
                <!-- content -->
                <footer>
                    <p>Blog footer - Copyright 2024</p>
                </footer>
            }
        }
    }

    pages {
        page "home" {
            route "/"
            layout "main"
            content {
                h1 "Welcome!"
                p {
                    link "/about" "Learn more about our site"
                }
                p "This is a regular paragraph."
            }
        }
        page "blog" {
            route "/blog"
            layout "blog"
            html {
                <article>
                    <h1>Latest Posts</h1>
                    <p>Check out our latest blog posts!</p>
                    <div class="post">
                        <h2>First Post</h2>
                        <p>This is our first blog post using raw HTML.</p>
                    </div>
                </article>
            }
        }
        page "employeeForm" {
            route "/employee/new"
            layout "main"
            content {
                h1 "Add New Employee"
                html {
                    <form action="/api/v1/employees" method="POST">
                        <div class="form-group">
                            <label for="name">Name:</label>
                            <input type="text" id="name" name="name" required>
                        </div>
                        <div class="form-group">
                            <label for="email">Email:</label>
                            <input type="email" id="email" name="email" required>
                        </div>
                        <div class="form-group">
                            <label for="team_id">Team ID:</label>
                            <input type="number" id="team_id" name="team_id">
                        </div>
                        <button type="submit">Add Employee</button>
                    </form>
                }
            }
        }
    }

    styles {
        css {
            body {
                background: #ffffff;
                color: #333;
            }
            h1 {
                color: #ff6600;
            }
        }
    }

    api {
        route "/api/v1/teams"
        method "GET"
        pipeline {
            executeQuery "teams"
            jq {
                {
                    data: (.rows | map({id: .id, name: .name})),
                }
            }
        }
    }

    query {
        name "teams"
        sql {
            SELECT * FROM teams
        }
    }

    api {
        route "/api/v1/employees"
        method "GET"
        
        pipeline {
            lua {
                if not querybuilder then
                    error("querybuilder module not loaded")
                end
                local qb = querybuilder.new()
                if not qb then
                    error("failed to create query builder")
                end
                
                local result = qb
                    :select("id", "team_id", "name", "email")
                    :from("employees")
                    :where_if(query.team_id, "team_id = ?", query.team_id)
                    :order_by("id")
                    :limit(query.limit or 20)
                    :offset(query.offset or 0)
                    :with_metadata()
                    :build()
                    
                result.request = request
                return result
            }
            
            executeQuery dynamic
            
            jq {
                {
                    data: (.rows | map(select(.type == "data")) | map({
                        name: .name,
                        email: .email,
                        team_id: .team_id
                    })),
                    metadata: {
                        total: (.rows | map(select(.type == "metadata")) | .[0].total_count),
                        offset: (.rows | map(select(.type == "metadata")) | .[0].offset),
                        limit: (.rows | map(select(.type == "metadata")) | .[0].limit),
                        has_more: (.rows | map(select(.type == "metadata")) | .[0].has_more)
                    },
                    request: .request
                }
            }
        }
    }

    api {
        route "/api/v1/employees"
        method "POST"
        fields {
            "name" {
                type "string"
                required true
                length 10..100
            }
            "email" {
                type "string"
                required true
                format "email"
            }
            "team_id" {
                type "number"
                required false
            }
        }
        pipeline {
            lua {
                local name = body.name
                local email = body.email
                local team_id = body.team_id
                
                if team_id then
                    team_id = tonumber(team_id)
                end
                
                -- Return params array for SQL step
                return {
                    params = {name, email, team_id}
                }
            }
            
            executeQuery "insertEmployee"
            
            lua {
                -- Access rows from the input parameter
                local result = request.rows[1]
                return {
                    success = true,
                    employee = {
                        id = result.id,
                        name = result.name,
                        email = result.email,
                        team_id = result.team_id
                    }
                }
            }
        }
    }

    query {
        name "insertEmployee"
        sql {
            INSERT INTO employees (name, email, team_id) 
            VALUES ($1, $2, $3)
            RETURNING id, team_id, name, email
        }
    }

    api {
        route "/api/v1/queryecho"
        method "GET"
        pipeline {
            jq {
                . + { test0: "test0" }
            }
            jq {
                . + { test1: "test1" }
            }
            lua {
                request.test2 = "test2"
                return request
            }
        }
    }
}
