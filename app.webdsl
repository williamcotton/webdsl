website {
    name "My Awesome Site"
    author "John Smith"
    version "1.0"
    port 3123
    database "postgresql://localhost/express-test"

    layout {
        name "main"
        html {
            <div>
                <h1>Site Header</h1>
                <p>Welcome to our website</p>
                <!-- content -->
                <p>Footer text</p>
            </div>
        }
    }

    layout {
        name "blog"
        html {
            <header>
                <h1>Blog Layout</h1>
                <nav>
                    <a href="/">Home</a> |
                    <a href="/blog">Blog</a>
                </nav>
            </header>
            <!-- content -->
            <footer>
                <p>Blog footer - Copyright 2024</p>
            </footer>
        }
    }

    page {
        name "home"
        route "/"
        layout "main"
        html {
            <h1>Welcome!</h1>
            <p>
                <a href="/blog">Read our blog</a>
            </p>
            <p>This is a regular paragraph.</p>
        }
    }

    page {
        name "blog"
        route "/blog"
        layout "blog"
        html {
            <article>
                <h1>Latest Posts</h1>
                <p>Check out our latest blog posts!</p>
                <div class="post">
                    <h2>First Post</h2>
                    <p>This is our first blog post using raw HTML.</p>
                </div>
            </article>
        }
    }

    page {
        name "mustache-test"
        route "/mustache-test"
        layout "blog"
        pipeline {
            jq {
                {
                    title: "My Title",
                    message: "My Message",
                    items: [
                        { name: "Wired up Item 1" },
                        { name: "Wired up Item 2" },
                        { name: "Wired up Item 3" }
                    ],
                    url: .url,
                    version: .version,
                    method: .method
                }
            }
        }
        mustache {
            <h1>{{title}}</h1>
            <p>{{message}}</p>
            <p>URL: {{url}}</p>
            <p>Version: {{version}}</p>
            <p>Method: {{method}}</p>
            <ul>
                {{#items}}
                <li>{{name}}</li>
                {{/items}}
            </ul>
        }
    }



    page {
        name "employeesPage"
        route "/employees"
        layout "main"
        pipeline {
            jq {
                . + {
                    params: [(.query.limit // 20), (.query.offset // 0)]
                }
            }
            sql {
                SELECT * FROM employees
                LIMIT $1
                OFFSET $2
            }
            jq {
                {
                    employees: (.rows // []),
                    query: ((.query // {}) | to_entries),
                    nextPage: ((((.query.offset // 0) | tonumber) + ((.query.limit // 0) | tonumber)) | tostring),
                    previousPage: ((((.query.offset // 0) | tonumber) - ((.query.limit // 0) | tonumber)) | tostring),
                    hasEmployees: ((.rows | length) > 0),
                    hasPreviousPage: (((.query.offset // 0) | tonumber) > 0),
                    hasNextPage: ((.rows | length) >= ((.query.limit // 0) | tonumber))
                }
            }
        }
        mustache {
            <h2>Employees</h2>
            {{#query.length}}
            <ul>
                {{#query}}
                <li>{{key}}: {{value}}</li>
                {{/query}}
            </ul>
            {{/query.length}}
            {{#hasEmployees}}
            <ul>
                {{#employees}}
                <li>{{name}}</li>
                {{/employees}}
            </ul>
            {{#hasPreviousPage}}
            <a href="/employees?limit=10&offset={{previousPage}}">Previous Page</a>
            {{/hasPreviousPage}}
            {{#hasNextPage}}
            <a href="/employees?limit=10&offset={{nextPage}}">Next Page</a>
            {{/hasNextPage}}
            {{/hasEmployees}}
            {{^hasEmployees}}
            <p>No employees found.</p>
            {{/hasEmployees}}
        }
    }

    page {
        name "employeeForm"
        route "/employee/new"
        layout "main"
        content {
            h1 "Add New Employee"
            html {
                <form action="/api/v1/employees" method="POST">
                    <div class="form-group">
                        <label for="name">Name:</label>
                        <input type="text" id="name" name="name" required>
                    </div>
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <input type="email" id="email" name="email" required>
                    </div>
                    <div class="form-group">
                        <label for="team_id">Team ID:</label>
                        <input type="number" id="team_id" name="team_id">
                    </div>
                    <button type="submit">Add Employee</button>
                </form>
            }
        }
    }

    styles {
        css {
            body {
                background: #ffffff;
                color: #333;
            }
            h1 {
                color: #ff6600;
            }
        }
    }

    api {
        route "/api/v1/teams"
        method "GET"
        pipeline {
            jq {
                {
                    error: "test",
                    statusCode: 401
                }
            }
            executeQuery "teams"
            jq {
                {
                    data: (.rows | map({id: .id, name: .name})),
                }
            }
        }
    }

    query {
        name "teams"
        sql {
            SELECT * FROM teams
        }
    }

    api {
        route "/api/v1/employees"
        method "GET"
        
        pipeline {
            lua {
                local qb = querybuilder.new()
                
                local result = qb
                    :select("id", "team_id", "name", "email")
                    :from("employees")
                    :where_if(query.team_id, "team_id = ?", query.team_id)
                    :order_by("id")
                    :limit(query.limit or 20)
                    :offset(query.offset or 0)
                    :with_metadata()
                    :build()

                return result
            }
            
            executeQuery dynamic
            
            jq {
                {
                    data: (.rows | map(select(.type == "data")) | map({
                        name: .name,
                        email: .email,
                        team_id: .team_id
                    })),
                    metadata: {
                        total: (.rows | map(select(.type == "metadata")) | .[0].total_count),
                        offset: (.rows | map(select(.type == "metadata")) | .[0].offset),
                        limit: (.rows | map(select(.type == "metadata")) | .[0].limit),
                        has_more: (.rows | map(select(.type == "metadata")) | .[0].has_more)
                    },
                    request: .
                }
            }
        }
    }

    api {
        route "/api/v1/employees"
        method "POST"
        fields {
            "name" {
                type "string"
                required true
                length 10..100
            }
            "email" {
                type "string"
                required true
                format "email"
            }
            "team_id" {
                type "number"
                required false
            }
        }
        pipeline {
            lua {
                local name = body.name
                local email = body.email
                local team_id = body.team_id
                
                if team_id then
                    team_id = tonumber(team_id)
                end
                
                -- Return params array for SQL step
                return {
                    params = {name, email, team_id}
                }
            }
            
            executeQuery "insertEmployee"
            
            jq {
                {
                    success: true,
                    employee: {
                        id: .rows[0].id,
                        name: .rows[0].name,
                        email: .rows[0].email,
                        team_id: .rows[0].team_id
                    },
                    request: .
                }
            }
        }
    }

    query {
        name "insertEmployee"
        sql {
            INSERT INTO employees (name, email, team_id) 
            VALUES ($1, $2, $3)
            RETURNING id, team_id, name, email
        }
    }

    api {
        route "/api/v1/queryecho"
        method "GET"
        pipeline {
            jq {
                . + { test0: "test0" }
            }
            jq {
                . + { test1: "test1" }
            }
            lua {
                request.test2 = "test2"
                return request
            }
        }
    }

    script {
        name "teamParamsScript"
        lua {
            return {
                params = {query.id}
            }
        }
    }

    query {
        name "getTeam"
        sql {
            SELECT * FROM teams
            WHERE id = $1
        }
    }

    transform {
        name "formatTeam"
        jq {
            {
                data: (.rows | map({id: .id, name: .name}))
            }
        }
    }

    api {
        route "/api/v1/team"
        method "GET"
        pipeline {
            executeScript "teamParamsScript"
            executeQuery "getTeam"
            executeTransform "formatTeam"
        }
    }

    api {
        route "/api/v2/employees"
        method "GET"

        pipeline {
            executeScript "employeesScript"
            executeQuery dynamic
            executeTransform "employeesTransform"
        }
    }

    script {
        name "employeesScript"
        lua {
            local qb = querybuilder.new()
            
            local result = qb
                :select("*")
                :from("employees")
                :where_if(query.team_id, "team_id = ?", query.team_id)
                :limit(query.limit or 20)
                :offset(query.offset or 0)
                :with_metadata()
                :build()
                
            return result
        }
    }

    transform {
        name "employeesTransform"
        jq {
            {
                data: (.rows | map(select(.type == "data")) | map({
                    name: .name,
                    email: .email,
                    team_id: .team_id
                })),
                metadata: {
                    total: (.rows | map(select(.type == "metadata")) | .[0].total_count),
                    offset: (.rows | map(select(.type == "metadata")) | .[0].offset),
                    limit: (.rows | map(select(.type == "metadata")) | .[0].limit),
                    has_more: (.rows | map(select(.type == "metadata")) | .[0].has_more)
                },
                request: .
            }
        }
    }
}
