// Notes collection with HTMX interactions

query {
    name "getNotes"
    sql {
        SELECT notes.*, employees.name as employee_name FROM notes JOIN employees ON notes.employee_id = employees.id ORDER BY date DESC
    }
}

page {
    name "notes-list"
    route "/htmx/notes"
    layout "htmx"
    pipeline {
        lua {
            local sql = findQuery("getNotes")
            local result = sqlQuery(sql)
            return { 
                notes = result.rows,
                pageTitle = "Notes"
            }
        }
    }
    mustache {
        <div class="min-h-screen bg-gray-50 py-8 px-4">
            <div class="container mx-auto">
                <div class="flex items-center justify-between mb-4">
                    <h1 class="text-3xl font-semibold text-gray-800">Notes</h1>
                    <!-- New Note Button -->
                    <button class="bg-indigo-500 hover:bg-indigo-600 text-white px-5 py-2 rounded shadow transition-colors"
                            hx-get="/htmx/notes/new"
                            hx-target="#dialog">
                        + New Note
                    </button>
                </div>

                <!-- Notes List -->
                <div id="notes-list" class="space-y-2">
                    {{#notes}}
                    <div id="note-{{id}}" class="bg-white p-4 rounded shadow flex justify-between items-center">
                        <div>
                            <h3 class="font-semibold text-gray-900">{{title}}</h3>
                            <p class="text-sm text-gray-500">By {{employee_name}} on {{date}}</p>
                        </div>
                        <div class="flex space-x-2">
                            <button class="text-indigo-600 hover:text-indigo-800 font-medium"
                                    hx-get="/htmx/notes/edit/{{id}}"
                                    hx-target="#dialog">
                                Edit
                            </button>
                            <button class="text-red-600 hover:text-red-800 font-medium"
                                    hx-delete="/htmx/notes/delete/{{id}}"
                                    hx-target="#note-{{id}}"
                                    hx-swap="outerHTML"
                                    hx-confirm="Are you sure you want to delete this note?">
                                Delete
                            </button>
                        </div>
                    </div>
                    {{/notes}}
                </div>
                
                <!-- Dialog for forms -->
                <div id="dialog" class="mt-6"></div>
            </div>
        </div>
    }
}

query {
    name "getEmployees"
    sql {
        SELECT id, name FROM employees ORDER BY name
    }
} 

// New note form
page {
    name "notes-new"
    route "/htmx/notes/new"
    layout "none"
    pipeline {
        lua {
            local sql = findQuery("getEmployees")
            local result = sqlQuery(sql)
            return { employees = result.rows }
        }
    }
    mustache {
        <div class="bg-white p-6 rounded shadow max-w-md mx-auto">
            <form hx-post="/htmx/notes/create" 
                  hx-target="#notes-list"
                  hx-swap="afterbegin"
                  class="space-y-4">
                <h2 class="text-2xl font-semibold text-gray-800">New Note</h2>
                
                <div>
                    <label class="block text-gray-700 mb-1">Title</label>
                    <input type="text" name="title" required
                           class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500">
                </div>
                
                <div>
                    <label class="block text-gray-700 mb-1">Employee</label>
                    <select name="employee_id" required
                            class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        {{#employees}}
                        <option value="{{id}}">{{name}}</option>
                        {{/employees}}
                    </select>
                </div>
                
                <div>
                    <label class="block text-gray-700 mb-1">Date</label>
                    <input type="date" name="date" required
                           class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500">
                </div>
                
                <div class="flex justify-end space-x-2">
                    <button type="button" 
                            class="bg-gray-200 hover:bg-gray-300 text-gray-700 px-4 py-2 rounded transition-colors"
                            onclick="document.getElementById('dialog').innerHTML='';">
                        Cancel
                    </button>
                    <button type="submit" 
                            class="bg-indigo-500 hover:bg-indigo-600 text-white px-4 py-2 rounded shadow transition-colors">
                        Create
                    </button>
                </div>
            </form>
        </div>
    }
}

query {
    name "createNote"
    sql {
        INSERT INTO notes (title, employee_id, date) VALUES ($1, $2, $3) RETURNING id
    }
}

query {
    name "getNote"
    sql {
        SELECT notes.*, employees.name as employee_name FROM notes JOIN employees ON notes.employee_id = employees.id WHERE notes.id = $1
    }
}

// Create note endpoint
page {
    name "notes-create"
    route "/htmx/notes/create"
    method "POST"
    layout "none"
    pipeline {
        lua {
            
            local title = body.title
            local employee_id = body.employee_id
            local date = body.date

            local sql = findQuery("createNote")
            local result = sqlQuery(sql, {title, employee_id, date})
            
            if result.rows and result.rows[1] then
                local sql = findQuery("getNote")
                local note = sqlQuery(sql, {result.rows[1].id})
                return { note = note.rows[1] }
            end
            return { error = "Failed to create note" }
        }
    }
    mustache {
        {{#note}}
        <div id="note-{{id}}" class="bg-white p-4 rounded shadow flex justify-between items-center mb-2">
            <div>
                <h3 class="font-semibold text-gray-900">{{title}}</h3>
                <p class="text-sm text-gray-500">By {{employee_name}} on {{date}}</p>
            </div>
            <div class="flex space-x-2">
                <button class="text-indigo-600 hover:text-indigo-800 font-medium"
                        hx-get="/htmx/notes/edit/{{id}}"
                        hx-target="#dialog">
                    Edit
                </button>
                <button class="text-red-600 hover:text-red-800 font-medium"
                        hx-delete="/htmx/notes/delete/{{id}}"
                        hx-target="#note-{{id}}"
                        hx-swap="outerHTML"
                        hx-confirm="Are you sure you want to delete this note?">
                    Delete
                </button>
            </div>
        </div>
        {{/note}}
    }
}

query {
    name "getNoteById"
    sql {
        SELECT * FROM notes WHERE id = $1
    }
}

// Edit note form
page {
    name "notes-edit"
    route "/htmx/notes/edit/:id"
    layout "none"
    pipeline {
        lua {
            local id = params.id
            local sql = findQuery("getNoteById")
            local note = sqlQuery(sql, {id})
            local sql = findQuery("getEmployees")
            local employees = sqlQuery(sql)
            
            --  Mark the currently selected employee 
            local noteEmployeeId = note.rows[1].employee_id
            for i, emp in ipairs(employees.rows) do
                if tostring(emp.id) == tostring(noteEmployeeId) then
                    emp.selected = true
                end
            end
            
            return { 
                note = note.rows[1],
                employees = employees.rows
            }
        }
    }
    mustache {
        <div class="bg-white p-6 rounded shadow max-w-md mx-auto">
            <form hx-post="/htmx/notes/update/{{note.id}}"
                  hx-target="#note-{{note.id}}"
                  hx-swap="outerHTML"
                  class="space-y-4">
                <h2 class="text-2xl font-semibold text-gray-800">Edit Note</h2>
                
                <div>
                    <label class="block text-gray-700 mb-1">Title</label>
                    <input type="text" name="title" required
                           value="{{note.title}}"
                           class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500">
                </div>
                
                <div>
                    <label class="block text-gray-700 mb-1">Employee</label>
                    <select name="employee_id" required
                            class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        {{#employees}}
                        <option value="{{id}}" {{#selected}}selected{{/selected}}>
                            {{name}}
                        </option>
                        {{/employees}}
                    </select>
                </div>
                
                <div>
                    <label class="block text-gray-700 mb-1">Date</label>
                    <input type="date" name="date" required
                           value="{{note.date}}"
                           class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500">
                </div>
                
                <div class="flex justify-end space-x-2">
                    <button type="button"
                            class="bg-gray-200 hover:bg-gray-300 text-gray-700 px-4 py-2 rounded transition-colors"
                            onclick="document.getElementById('dialog').innerHTML='';">
                        Cancel
                    </button>
                    <button type="submit"
                            class="bg-indigo-500 hover:bg-indigo-600 text-white px-4 py-2 rounded shadow transition-colors">
                        Update
                    </button>
                </div>
            </form>
        </div>
    }
}

query {
    name "updateNote"
    sql {
        UPDATE notes SET title = $1, employee_id = $2, date = $3 WHERE id = $4
    }
}


// Update note endpoint
page {
    name "notes-update"
    route "/htmx/notes/update/:id"
    method "POST"
    layout "none"
    pipeline {
        lua {
            local id = params.id
            local title = body.title
            local employee_id = body.employee_id
            local date = body.date
            
            local sql = findQuery("updateNote")
            sqlQuery(sql, {title, employee_id, date, id})
            
            local sql = findQuery("getNote")
            local note = sqlQuery(sql, {id})
            return { note = note.rows[1] }
        }
    }
    mustache {
        {{#note}}
        <div id="note-{{id}}" class="bg-white p-4 rounded shadow flex justify-between items-center mb-2">
            <div>
                <h3 class="font-semibold text-gray-900">{{title}}</h3>
                <p class="text-sm text-gray-500">By {{employee_name}} on {{date}}</p>
            </div>
            <div class="flex space-x-2">
                <button class="text-indigo-600 hover:text-indigo-800 font-medium"
                        hx-get="/htmx/notes/edit/{{id}}"
                        hx-target="#dialog">
                    Edit
                </button>
                <button class="text-red-600 hover:text-red-800 font-medium"
                        hx-delete="/htmx/notes/delete/{{id}}"
                        hx-target="#note-{{id}}"
                        hx-swap="outerHTML"
                        hx-confirm="Are you sure you want to delete this note?">
                    Delete
                </button>
            </div>
        </div>
        {{/note}}
    }
}

query {
    name "deleteNote"
    sql {
        DELETE FROM notes WHERE id = $1
    }
}

// Delete note endpoint
page {
    name "notes-delete"
    route "/htmx/notes/delete/:id"
    method "POST"
    layout "none"
    pipeline {
        lua {
            local id = params.id
            local sql = findQuery("deleteNote")
            sqlQuery(sql, {id})
            return {}
        }
    }
    mustache {
        <!-- Empty response as the element will be removed -->
    }
}
